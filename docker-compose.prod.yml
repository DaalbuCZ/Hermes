services:
  # PostgreSQL Database (Production)
  db:
    image: postgres:17-alpine
    container_name: hermes-db-prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-hermes_production}
      POSTGRES_USER: ${DATABASE_USERNAME:-hermes_prod_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432" # Only bind to localhost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    env_file:
      - hermes/env.production
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-hermes_prod_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: hermes-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-CHANGE_THIS_REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379" # Only bind to localhost
    volumes:
      - redis_data:/data
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Django Backend (Production)
  django-web:
    build:
      context: ./hermes
      dockerfile: Dockerfile.prod
    container_name: hermes-django-prod
    ports:
      - "127.0.0.1:8000:8000" # Only bind to localhost
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG:-False}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL:-WARNING}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgresql}
      DATABASE_NAME: ${DATABASE_NAME:-hermes_production}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-hermes_prod_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-False}
      SECURE_HSTS_SECONDS: ${SECURE_HSTS_SECONDS:-31536000}
      SECURE_HSTS_INCLUDE_SUBDOMAINS: ${SECURE_HSTS_INCLUDE_SUBDOMAINS:-True}
      SECURE_HSTS_PRELOAD: ${SECURE_HSTS_PRELOAD:-True}
      SECURE_BROWSER_XSS_FILTER: ${SECURE_BROWSER_XSS_FILTER:-True}
      SECURE_CONTENT_TYPE_NOSNIFF: ${SECURE_CONTENT_TYPE_NOSNIFF:-True}
      X_FRAME_OPTIONS: ${X_FRAME_OPTIONS:-DENY}
    env_file:
      - hermes/env.production
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # React Frontend (Production)
  react-frontend:
    build:
      context: ../OlympReact/hermes
      dockerfile: Dockerfile.prod
    container_name: hermes-react-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      django-web:
        condition: service_healthy
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: hermes-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - react-frontend
      - django-web
    networks:
      - hermes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hermes-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - hermes-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hermes-grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-CHANGE_THIS_GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - hermes-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hermes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
